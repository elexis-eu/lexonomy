<dict-config-kontext>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["kontext", "KonText connection"]]}/>
   <h3>KonText connection</h3>
   <div class="row">
      <div class="input-field">
         <input value={ state.data.url }
               id="kontext_url"
               type="text"/>
         <label for="kontext_url">KonText URL</label>
         <span class="helper-text">The URL of the KonText installation where external links should point. Defaults to <tt>https://www.clarin.si/kontext/</tt>. Do not change this unless you are using a local installation of KonText.</span>
      </div>
   </div>
      <div class="row">
         <div class="input-field">
            <input data-selected-corpus={ state.data.corpus }
                  type="text"
                  id="corpus"
                  class="autocomplete"
                  placeholder="Retrieving available corpora from KonText, please wait...">
            <label for="corpus">Corpus name</label>
            <span class="helper-text">Select a Sketch Engine corpus from the list of corpora available to you.</span>
            <span class="helper-text"
                  id="corpusInfo"
                  hide={ true }></span>
         </div>
      </div>
      <div class="row">
         <div class="input-field">
            <input value={ state.data.concquery}
                  id="concquery"
                  type="text" />
            <label for="concquery">Concordance query</label>
            <span class="helper-text">The CQL query that will be used to obtain concordance from KonText. You can use placeholders for elements in the form of '%(element)', e.g. '[lemma="%(headword)"]'. If left empty the 'simple' query type will be used as configured for the respective corpus. Please note that you cannot use CQL syntax with default attribute because it is not specified.</span>
         </div>
      </div>
      <div class="row">
         <div class="input-field">
            <select id="searchElements" multiple></select>
            <label for="searchElements">Additional search elements</label>
            <span class="helper-text">You can select any textual elements here whose content you would like to search for in KonText. A menu will be displayed next to all these elements like for the root entry element.</span>
         </div>
      </div>
   <div class="row">
      <h4>Examples</h4>
   </div>
   <div class="row">
      <div class="input-field">
         <select id="container">
            <option value="">(not set)</option>
         </select>
         <label for="container">Example container</label>
         <span class="helper-text">Select the element which should wrap each individual example. When you pull example sentences automatically from a corpus, Lexonomy will insert one of these elements for each example sentence.</span>
      </div>
   </div>
   <div class="row">
      <div class="input-field">
         <textarea id="template"
               class="materialize-textarea"
               placeholder="XML template">{ state.data.template }</textarea>
         <label for="template">XML template</label>
         <span class="helper-text">This is the XML that will be inserted into your entries with each corpus example. The actual text will be where the placeholder <tt>$text</tt> is.</span>
      </div>
   </div>
   <div class="row">
      <div class="input-field">
         <select id="markup">
            <option value="">(not set)</option>
         </select>
         <label for="markup">Headword mark-up</label>
         <span class="helper-text">Select the element which should mark up the headword in inserted corpus examples. This setting is optional: if you make no selection, corpus examples will be inserted without mark-up.</span>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>

   <style>
      #searchElements {
         width: 10em;
      }
   </style>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            data: {
               url: 'https://www.clarin.si/kontext/', searchElements: [],
               container: '', template: '', markup: ''
            }
         },

         onMounted() {
            this.store.loadDictionaryConfig("kontex")
                  .done(response => {
                     this.state.data = response.content
                     if (!response.url || response.url == '') {
                        this.state.data.url = 'https://www.clarin.si/kontext/'
                     }
                     if (!response.searchElements) {
                        this.state.data.searchElements = []
                     }
                     M.updateTextFields()
                     M.textareaAutoResize($('#template'))
                     $('#corpus').autocomplete({data: {}})
                     $('#corpus').data('corpora', {})
                     if (this.state.data.corpus != '') {
                        $('#corpus').data('selected-corpora', this.state.data.corpus)
                     }
                     this.store.loadKontextCorpora()
                           .done(function(res) {
                              var corporaList = {}
                              var corporaData = {}
                              var selected = ''
                              res.corpus_list.forEach(e => {
                                 var eInfo = e.name + " (" + e.desc + "; " + e.size_info + ")"
                                 corporaData[eInfo] = e.corpus_id
                                 corporaList[eInfo] = null
                                 if ($('#corpus').data('selected-corpus') == e.corpus_id) {
                                    selected = eInfo
                                    $('#corpusInfo').html('Currently selected corpus: ' + e.name + ".")
                                    $('#corpusInfo').show()
                                 }
                              })
                              $('#corpus').autocomplete({data: corporaList})
                              $('#corpus').data('corpora', corporaData)
                              $('#corpus').attr('placeholder', 'Type to search in the list of corpora')
                              if (selected != '') {
                                 $('#corpus').val(selected)
                              }
                           })
                     $('#corpus').on('change', function() {
                        var corporaData = $(this).data('corpora')
                        $(this).data('selected-corpus', corporaData[$(this).val()])
                        $('#corpusInfo').html('Currently selected corpus: ' + $(this).val() + ".")
                        $('#corpusInfo').show()
                     })

                     this.state.data.searchElements.forEach(el => {
                        $('#searchElements option[value='+el+']').attr('selected','selected')
                     })
                     if (this.state.data.container != '') {
                        $('#container option[value='+this.state.data.container+']').attr('selected','selected')
                     }
                     if (this.state.data.markup != '') {
                        $('#markup option[value='+this.state.data.markup+']').attr('selected','selected')
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     $('select').formSelect()
                     M.updateTextFields()
                  })
         },

         onUpdated() {
            if (this.dictData.config.xema && this.dictData.config.xema.elements) {
               if ($('#searchElements option').length == 0) {
                  Object.entries(this.dictData.config.xema.elements).forEach(([key, info]) => {
                     if (info.filling == 'txt' || info.filling == 'lst') {
                        var checked = this.state.data.searchElements.includes(key)? 'checked':''
                        $('#searchElements').append('<option value="' + key + '" ' + checked + '>' + key + '</option>')
                     }
                  })
               }
               if ($('#container option').length == 1) {
                  Object.entries(this.dictData.config.xema.elements).forEach(([key, info]) => {
                        var checked = (this.state.data.container == key)? 'checked':''
                        $('#container').append('<option value="' + key + '" ' + checked + '>' + key + '</option>')
                  })
               }
               if ($('#markup option').length == 1) {
                  Object.entries(this.dictData.config.xema.elements).forEach(([key, info]) => {
                        var checked = (this.state.data.markup == key)? 'checked':''
                        $('#markup').append('<option value="' + key + '" ' + checked + '>' + key + '</option>')
                  })
               }
               $('select').formSelect()
            }
         },

         getConfigData() {
            var newData = {
               url: $('#kontext_url').val(),
               corpus: $('#corpus').data('selected-corpus'),
               concquery: $('#concquery').val(),
               searchElements: $('#searchElements').val(),
               container: $('#container').val(),
               template: $('#template').val(),
               markup: $('#markup').val(),
            }
            return newData
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("kontext", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

</dict-config-kontext>
