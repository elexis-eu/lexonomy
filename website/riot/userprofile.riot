<userprofile>
   <h3>Account settings</h3>
   <!-- Sketch Engine account -->
   <div if={dictData.siteconfig && !dictData.isSiteconfigLoading}
         class="row">
      <label>Sketch Engine login</label>
      <div if={dictData.siteconfig.sketchengineLoginPage && authData.ske_username}>
         <p>Your Lexonomy account is linked to your Sketch Engine account <b>{ authData.ske_username }</b>
            <br/>
            <a href={ dictData.siteconfig.sketchengineLoginPage }>Link to a different Sketch Engine account&nbsp;»</a>
         </p>
      </div>
      <div if={dictData.siteconfig.sketchengineLoginPage && !authData.ske_username}>
         <p><strong>Sketch Engine login</strong></p>
         <p><a href={ dictData.siteconfig.sketchengineLoginPage }>Link Lexonomy to your Sketch Engine account&nbsp;»</a>
         </p>
      </div>
      <div if={ !dictData.siteconfig.sketchengineLoginPage }>
         <p if={ state.skeuserMessage != '' }>{ state.skeuserMessage }</p>
         <div class="input-field"
               style="margin-top: 0;">
            <div style="display: flex; gap: 10px; align-items: center;">
               <input id="skeusername"
                     type="text"
                     class="validate"
                     value={ authData.ske_username }
                     style="width: 350px;" />
               <button class="btn waves-effect waves-light"
                     onclick={ doChangeUser }
                     style="margin-bottom: 10px;">Change username
                  <i class="material-icons right">send</i>
               </button>
            </div>
            <span class="helper-text">Set your login username to Sketch Engine.</span>
         </div>
      </div>
   </div>

   <!-- Sketch Engine API key -->
   <div class="row">
      <label>Sketch Engine API key</label>
      <p if={ state.skeapiMessage}>{ state.skeapiMessage }</p>
      <p if={ dictData.siteconfig.sketchengineLoginPage}>
         Unless you need special setup, Please, <a href={ dictData.siteconfig.sketchengineLoginPage }>login via Sketch Engine</a> to set API key automatically.
      </p>
      <div class="input-field"
            style="margin-top: 0;">
         <div style="display: flex; gap: 10px; align-items: center;">
            <input id="skeapi"
                  type="text"
                  class="validate"
                  value={ authData.ske_apiKey }
                  style="width: 350px;"/>
            <button class="btn waves-effect waves-light"
                  onclick={ doChangeKey }
                  style="margin-bottom: 10px;">Change API key
               <i class="material-icons right">send</i>
            </button>
         </div>
         <span class="helper-text">Set your API key for Sketch Engine.</span>
      </div>
   </div>

   <!-- Lexonomy API key -->
   <div class="row">
      <p>{ state.apiMessage }</p>
      <label>Lexonomy API key</label>
      <div class="input-field"
            style="margin-top: 0;">
         <div style="display: flex; gap: 10px; align-items: center;">
            <input type="text"
                  value={authData.apiKey || "not set"}
                  disabled
                  style="width: 350px;">
            <button class="btn waves-effect waves-light"
                  onclick={ doNewKey }
                  style="margin-bottom: 10px;">
               Generate new API key
               <i class="material-icons right">autorenew</i>
            </button>
            <button class="btn waves-effect waves-light"
                  onclick={ doDeleteKey }
                  style="margin-bottom: 10px;">
               Remove API key
               <i class="material-icons right">delete</i>
            </button>
         </div>
         <span class="helper-text">This key allows external tools such as Sketch Engine to create a dictionary in your account and to populate it with pre-generated entries.</span>
      </div>
   </div>

   <!-- set new password -->
   <div class="row">
      <p>{ state.passMessage }</p>
      <label>New password</label>
      <div class="input-field"
            style="margin-top: 0;">
         <div style="display: flex; gap: 10px; align-items: center;">
            <input id="password"
                  type="password"
                  class="validate"
                  style="width: 350px;"/>
            <button class="btn waves-effect waves-light"
                  onclick={ doChangePass }
                  style="margin-bottom: 10px;">Change password
               <i class="material-icons right">send</i>
            </button>
         </div>
         <span class="helper-text">Set your password to access Lexonomy.</span>
      </div>
   </div>
   <div>
      <a class="btn"
            href="#/"
            onclick="window.history.back()">Back</a>
   </div>

   <script>
      export default {
         state: {
            passMessage: '',
            apiMessage: '',
            skeuserMessage: '',
            skeapiMessage: ''
         },

         onMounted() {
            M.updateTextFields()
         },

         doChangePass(event) {
            if ($('#password').val() != '') {
               $.post(window.API_URL + "changepwd.json", {password: $('#password').val()}, (response) => {
                  if (response.success) {
                     this.passMessage = 'Password changed.'
                  } else {
                     this.passMessage = 'There was an error saving the password.'
                  }
                  this.update()
               })
            }
         },

         doChangeUser(event) {
            if ($('#skeusername').val() != '') {
               $.post(window.API_URL + "changeskeusername.json", {ske_userName: $('#skeusername').val()}, (response) => {
                  if (response.success) {
                     this.state.skeuserMessage = 'Username changed.'
                  } else {
                     this.state.skeuserMessage = 'There was an error saving the username.'
                  }
                  this.update()
               })
            }
         },

         doChangeKey(event) {
            if ($('#skeapi').val() != '') {
               $.post(window.API_URL + "changeskeapi.json", {ske_apiKey: $('#skeapi').val()}, (response) => {
                  if (response.success) {
                     this.state.skeapiMessage = 'API key changed.'
                  } else {
                     this.state.skeapiMessage = 'There was an error saving the API key.'
                  }
                  this.update()
               })
            }
         },

         doNewKey(event) {
            var newkey = this.generateKey()
            $.post(window.API_URL + "changeoneclickapi.json", {apiKey: newkey}, (response) => {
               if (response.success) {
                  this.state.apiMessage = 'API key changed.'
                  this.authData.apiKey = newkey
               } else {
                  this.state.apiMessage = 'There was an error saving the API key.'
               }
               this.update()
            })
         },

         doDeleteKey(event) {
            $.post(window.API_URL + "changeoneclickapi.json", {apiKey: ""}, (response) => {
               if (response.success) {
                  this.state.apiMessage = 'API key deleted.'
                  this.authData.apiKey = ""
               } else {
                  this.state.apiMessage = 'There was an error saving the API key.'
               }
               this.update()
            })
         },

         generateKey() {
            var alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
            var key=""
            while(key.length<32) {
               var i=Math.floor(Math.random() * alphabet.length)
               key+=alphabet[i]
            }
            return key
         }
      }
   </script>
</userprofile>
