<dict-edit-entry>
   <div class="row editorContainer">
      <div class="xonomy-envelope">
         <div id="toolbar" class="buttons"></div>
         <div id="container" class="empty"></div>
         <div id="history" style="display: none"></div>
         <div id="waiter" style="display: none"></div>
         <div id="statusbar">
            <div class="alertmessage yellow">
               <span class="text">(ALERT)</span>
               <span class="right clickable closeIcon">
                  <i class="material-icons"
                        onclick={onAlertCloseClick}>close</i>
               </span>
            </div>
            <span class="statusmessage"></span>
         </div>
      </div>
      <div id="editorStyle"></div>
   </div>

   <style>
      .editorContainer{
         position: relative;
         margin-bottom: 0;
      }
      .editorContainer #toolbar{
         box-shadow: none;
         border-bottom: 1px solid #d9d9d8;
      }
      .editorContainer #container{
          z-index: 5;
          background-color: white;
         transition-delay: 1s;
      }
      .editorContainer #container #editor.laic{
         padding-left: 30px;
      }
      .editorContainer #container .viewer{
         padding: 0;
      }
      .editorContainer #history{
         position: absolute;
         top: 45px;
         border-left: 1px solid #d9d9d8;
         background-color: #f2f2f2;
      }
      .xonomy div.modeSwitcher{
         position: absolute;
         bottom: 26px;
      }
      #sourceCode{
         position: absolute;
         top: 60px;
         left: 10px;
         right: 10px;
         bottom: 40px;
      }
      #sourceCode textarea{
         border: none;
         box-shadow: none;
         background-color: #f2f2f2;
         border-radius: 0;
      }
   </style>

   <script>
      export default {
         bindings: [["store", "entryChanged", "onEntryChanged"]],

         onEntryChanged(){
            this.initEditorIfNeeded()
            this.updateUrl()
            Screenful.Editor[this.dictData.mode](null, this.dictData.entryId)
         },

         initEditorIfNeeded(){
            if(this.dictData.dictId && this.dictData.config && !Screenful.Editor.editor){
               Screenful.Editor.createUrl = `${window.API_URL}${this.dictData.dictId}/entrycreate.json`
               Screenful.Editor.readUrl = `${window.API_URL}${this.dictData.dictId}/entryread.json`
               Screenful.Editor.updateUrl = `${window.API_URL}${this.dictData.dictId}/entryupdate.json`
               Screenful.Editor.deleteUrl = `${window.API_URL}${this.dictData.dictId}/entrydelete.json`

               // global variables used by xonomy/screenfull
               var xema = this.dictData.config.xema;
               var xemplate = this.dictData.config.xemplate;
               kontext = this.dictData.config.kontext;
               kex = this.dictData.config.kex;
               subbing = this.dictData.config.subbing;
               xampl = this.dictData.config.xampl;
               thes = this.dictData.config.thes;
               collx = this.dictData.config.collx;
               defo = this.dictData.config.defo;
               titling = this.dictData.config.titling;
               flagging = this.dictData.config.flagging;
               linking = this.dictData.config.linking;
               editing = this.dictData.config.editing;
               dictId = this.dictId;
               userDicts = this.dictData.dictlist;
               //ske_username = this.authData.ske_username;
               //ske_apiKey = this.authData.ske_apiKey;

               var customizeEditor = "";
               var usingOwnEditor = false;
               if (editing._js) {
                  try{
                     customizeEditor = new Function("return " + editing._js)();
                     usingOwnEditor = customizeEditor.editor && customizeEditor.harvester;
                  } catch(e){
                     M.toast({html: "Invalid custom editor code."})
                  }
               }
               $("#editorStyle").html(editing._css ? `<style>${editing._css}</style>` : '')
               if (!xemplate[xema.root]) xemplate[xema.root] = {shown: false};
               if (xemplate[xema.root].shown == "false") xemplate[xema.root].shown = false;
               Screenful.Editor.viewer=null;
               if(xemplate._xsl || xemplate._css || xemplate[xema.root].shown) {
                  Screenful.Editor.viewer = function (div, entry) {
                     if (entry.contentHtml.length == 0) {
                        var doc = (new DOMParser()).parseFromString(entry.content, 'text/xml');
                        entry.contentHtml = Xemplatron.xml2html(doc, xemplate, xema);
                     }
                     $(div).addClass("viewer").html(entry.contentHtml);
                     $(div).find("a.xref").on("click", function(e){
                        var text = $(e.delegateTarget).attr("data-text");
                        window.parent.$("#searchbox").val(text);
                        window.parent.Screenful.Navigator.list();
                     });
                  };
               }
               Screenful.Editor.editor = function (div, entry, uneditable) {
                  uneditable = !this.dictData.userAccess.canEdit
                  Xonomy.lang = "en";
                  Xonomy.baseUrl = window.API_URL
                  newXml = "";
                  if (xema["_xonomyDocSpec"]) {
                     var docSpec = xema["_xonomyDocSpec"];
                     if (xema["_newXml"]) {
                        newXml = xema["_newXml"];
                     }
                  } else if (xema["_dtd"]) {
                     var xmlStructure = parseDTD(xema["_dtd"]);
                     var docSpec = struct2Xonomy(xmlStructure);
                     newXml = initialDocument(xmlStructure);
                  } else {
                     var docSpec = Xematron.xema2docspec(xema, editing.xonomyTextEditor);
                  }
                  if (!newXml) {
                     newXml = Xematron.xema2xml(xema);
                  }

                  docSpec.allowModeSwitching = true;
                  docSpec.onModeSwitch = function (mode) {
                     Cookies.set("xonomyMode_" + this.dictData.dictId, mode);
                     window.parent.$(".doctypes").removeClass("laic");
                     window.parent.$(".doctypes").removeClass("nerd");
                     window.parent.$(".doctypes").addClass(mode);
                  }.bind(this);
                  if (!uneditable) {
                     docSpec.allowLayby=true;
                     docSpec.laybyMessage="This is your temporary lay-by for entry fragments. You can drag and drop XML elements here.";
                  }
                  Xonomy.setMode(Cookies.get("xonomyMode_" + this.dictData.dictId) || editing.xonomyMode);
                  Xrefs.extendDocspec(docSpec, xema);
                  Ske.extendDocspec(docSpec, xema);
                  Kontext.extendDocspec(docSpec, xema);
                  Sub.extendDocspec(docSpec, xema);
                  docSpec.onchange = Screenful.Editor.changed;
                  if (uneditable) {
                     for (elName in docSpec.elements) docSpec.elements[elName].isReadOnly = true;
                     if (docSpec.unknownElement && typeof(docSpec.unknownElement) == "object") docSpec.unknownElement.isReadOnly = true;
                     if (docSpec.unknownElement && typeof(docSpec.unknownElement) == "function") {
                        var func = docSpec.unknownElement;
                        docSpec.unknownElement = function(elName){
                           var ret = func(elName);
                           ret.isReadOnly = true;
                           return ret;
                        }
                     }
                  }

                  if (!usingOwnEditor) {
                     if (customizeEditor && customizeEditor.adjustDocSpec) customizeEditor.adjustDocSpec(docSpec);
                     Xonomy.render((entry ? entry.content : newXml), div, docSpec);
                     if(!Xonomy.keyNav) Xonomy.startKeyNav($("#container")[0], document.getElementById("container"));
                  } else {
                     customizeEditor.editor(div, entry ? entry : {content: newXml, id: 0}, uneditable);
                  }
               }.bind(this);
               Screenful.Editor.harvester=function(div){
                  if(!usingOwnEditor){
                     return Xonomy.harvest();
                  } else {
                     return customizeEditor.harvester(div);
                  }
               };
               Screenful.Editor.allowSourceCode = true;
               Screenful.Editor.formatSourceCode = Screenful.formatXml
               Screenful.Editor.validateSourceCode = Screenful.isWellFormedXml
               Screenful.Editor.cleanupSourceCode = Screenful.cleanupXml

               // history
               Screenful.History.historyUrl = window.API_URL + this.dictData.dictId+"/history.json";
               Screenful.History.isDeletion = revision => revision.action == "delete" || revision.action == "purge"
               Screenful.History.getRevisionID = revision => revision.revision_id
               Screenful.History.printAction = function(revision) {
                  var content = "";
                  //actions: delete | create | update | purge
                  //historiography: {apikey: apikey} | {uploadStart: uploadStart, filename: filename}
                  content += "<div style='white-space: nowrap'>";
                  if (revision.action=="create") content += "<b>Created</b>";
                  else if (revision.action=="update") content += "<b>Changed</b>";
                  else if (revision.action=="delete") content += "<b>Deleted</b>";
                  else if (revision.action=="purge") content += "<b>Bulk-deleted</b>";
                  if (revision.historiography.uploadStart) content += " while uploading";
                  if (revision.historiography.apikey) content += " through API";
                  if (revision.historiography.refactoredFrom) content += " as a subentry of <a href='javascript:void(null)' onclick='parent.Screenful.Editor.open(null, "+revision.historiography.refactoredFrom+")'>"+revision.historiography.refactoredFrom+"</a>";
                  content += "</div>";
                  if (revision.email) content += "<div style='white-space: nowrap'><b>By:</b> "+revision.email+"</div>";
                  content += "<div style='white-space: nowrap'><b>When:</b> "+revision.when+"</div>";
                  return content;
               };
               Screenful.History.fakeEntry = function(revision) {
                  return {id: revision.entry_id, content: revision.content, contentHtml: revision.contentHtml};
               };
               Screenful.Editor.onListChange = this.onListChange
               Screenful.Editor.onEntryIdChange = this.onEntryIdChange
               Screenful.Editor.onModeChange = this.onModeChange

               Screenful.Editor.populateToolbar();
               Screenful.Editor.updateToolbar();
               Screenful.status(Screenful.Loc.ready);

               if(this.dictData.entryId){
                  Screenful.Editor[this.dictData.mode](null,this.dictData.entryId);
               }
            }
         },

         onAlertCloseClick(){
            $(".alertmessage").hide()
         },

         onListChange(){
            this.store.loadEntrylist()
         },

         onEntryIdChange(entryId){
            this.dictData.entryId = entryId
            this.updateUrl()
         },

         onModeChange(mode){
            this.dictData.mode = mode
            this.updateUrl()
         },

         updateUrl(){
            let newUrl = `${window.location.href.split("#")[0]}#${this.dictData.dictId}/edit/${this.dictData.doctype}/${this.dictData.entryId}/${this.dictData.mode}`
            if(newUrl != window.location.href){
               history.pushState(null, null, newUrl)
            }
         },

         onMounted() {
            this.initEditorIfNeeded()
         },

         onUpdated(){
            this.initEditorIfNeeded()
         },

         onBeforeUnmount(){
            Screenful.Editor.editor = null
         }
      }
   </script>

</dict-edit-entry>

