<dict-config-subbing>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["subbing", "Subentries"]]}/>
   <h3>Subentries</h3>
   <template if={!state.isLoading}>
      <div>
         <label>
            Selected subentries
         </label>
         <div if={!state.data.elements.length}
               class="grey-text">
            <i>no subentry element selected</i>
         </div>
         <div if={state.data.elements.length}>
            <div each={ element in state.data.elements }
                  class="chip">
               { element }
               <i class="close material-icons"
                     onclick={onRemoveElementClick.bind(this, element)}>close</i>
            </div>
            <br>
         </div>
         <br>
      </div>
      <template if={selectOptions.length}>
         <label for="new-element">Add subentry element</label>
         <div class="input-field">
            <div class="buttons"
                  style="max-width: 500px;">
               <select id="new-element"></select>
               <a class="btn"
                     onclick={ doAddEl }
                     style="margin-top: 4px;">
                  add
                  <i class="material-icons right">add</i>
               </a>
            </div>
            <span class="helper-text">Elements listed here function as subentries which can be shared by multiple entries.</span>
         </div>
      </template>
   </template>
   <br><br>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            data: {elements: []}
         },

         onRemoveElementClick(el, evt) {
            evt.stopPropagation()
            this.state.data.elements = this.state.data.elements.filter(val => val != el)
            this.update()
         },

         doAddEl(event) {
            this.state.data.elements.push($('#new-element').val())
            this.update()
         },

         onMounted() {
            this.store.loadDictionaryConfig("subbing")
                  .done(response => {
                     this.state.data = {elements: Object.keys(response.content)}
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         onBeforeUpdate(){
            this.selectOptions = Object.keys(this.dictData.config.xema.elements).filter(key => {
               return !this.state.data.elements.includes(key)
            })
         },

         onUpdated() {
            if (this.dictData.config.xema && this.dictData.config.xema.elements) {
               var $select = $('select')
               if(this.selectOptions.length && $select.length){
                  var instance = M.FormSelect.getInstance($select)
                  instance && instance.destroy()
                  $select.empty()
                  this.selectOptions.forEach(key => {
                     $('#new-element').append('<option value="' + key + '">' + key + '</option>')
                  })
                  $select.formSelect()
               }
            }
         },

         saveData() {
            let data = {}
            this.state.data.elements.forEach(el => {
               data[el] = {}
            })
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("subbing", data)
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

</dict-config-subbing>
