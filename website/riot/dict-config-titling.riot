<dict-config-titling>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["titling", "Headword list"]]}/>
   <h3>Headword</h3>
   <div class="row">
      <div class="input-field col s6">
         <select id="headword">
            <option value="">(not set)</option>
         </select>
         <label for="headword">Headword</label>
         <span class="helper-text">Select the element which contains the entry's headword. If you make no selection here Lexonomy will try to guess what the headword of each entry is.</span>
      </div>
   </div>
   <div class="row">
      <div class="input-field col s6">
         <select id="headwordSorting">
            <option value="">(not set)</option>
         </select>
         <label for="headwordSorting">Headword sorting</label>
         <span class="helper-text">Select the element which will be used for sorting of headwords in the entry list. If you make no selection here Lexonomy will use the element you chose for headword.</span>
      </div>
      <div class="input-field col s6">
         <label style="padding-top: 30px;">
            <input type="checkbox"
                  id="sortDesc"
                  checked={ state.data.sortDesc }/>
            <span>Sort in descending order</span>
         </label>
      </div>
   </div>
   <div class="row">
      <h6>Headword annotations</h6>
   </div>
   <div class="row">
      <div class="col s5">
         <label>
            <input name="hwannotype"
                  type="radio"
                  value="simple"
                  checked={ state.data.headwordAnnotationsType == "simple" }
                  onchange={ changeAnnotation }/>
            <span>simple</span>
         </label>
         <br/>
         <div class="input-field">
            <select id="headwordAnnotations"
                  multiple
                  disabled={ state.data.headwordAnnotationsType == 'advanced' }>
            </select>
            <span class="helper-text">You can select any elements here whose content you want displayed beside the headword in the entry list, such as homograph numbers or part-of-speech labels.</span>
         </div>
      </div>
      <div class="col s5">
         <label>
            <input name="hwannotype"
                  type="radio"
                  value="advanced"
                  checked={ state.data.headwordAnnotationsType == "advanced" }
                  onchange={ changeAnnotation }/>
            <span>advanced</span>
         </label>
         <br/>
         <div class="input-field">
            <textarea id="advancedAnnotations"
                  class="materialize-textarea"
                  placeholder="headword annotations"
                  disabled={ state.data.headwordAnnotationsType == 'simple' }>{ state.data.headwordAnnotationsAdvanced }</textarea>
            <span class="helper-text">You can insert any HTML containing placeholders for elements in the form of '%(element)', e.g. '&lt;b>%(headword)&lt;/b>'.</span>
         </div>
      </div>
   </div>
   <div class="row">
      <div class="input-field col s8">
         <input data-selected-locale={ state.data.locale }
               type="text" id="sort_locale"
               class="autocomplete"
               placeholder="Type to search for language"/>
         <label for="sort_locale">Alphabetical order</label>
         <span class="helper-text">Select language to sort entries alphabetically in the entry list.</span>
      </div>
   </div>
   <div class="row">
      <div class="input-field col s6">
         <input value={ state.data.numberEntries}
               id="numberEntries"
               type="number" />
         <label for="numberEntries">Number of entries to be shown in the entry list at once</label>
         <span class="helper-text">If your dictionary contains large entries (large XML files), it is recommended to reduce this number for quicker loading of entry list.</span>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            data: {
               headwordAnnotationsType: 'simple',
               headwordAnnotations: []
            }
         },

         changeAnnotation() {
            if ($('[name=hwannotype][value=advanced]').is(':checked')) {
               $('#headwordAnnotations').attr('disabled', 'disabled')
               $('#advancedAnnotations').removeAttr('disabled')
            } else {
               $('#advancedAnnotations').attr('disabled', 'disabled')
               $('#headwordAnnotations').removeAttr('disabled')
            }
            $('#headwordAnnotations').formSelect()
         },

         onMounted() {
            this.store.loadDictionaryConfig("titling")
                  .done(response => {
                     this.state.data = response.content
                     if (!this.state.data.numberEntries) this.state.data.numberEntries = 1000
                     if (!this.state.data.headwordAnnotationsType) this.state.data.headwordAnnotationsType = 'simple'
                     if (!this.state.data.headwordAnnotations) this.state.data.headwordAnnotations = []

                     // fill locale list for autocomplete
                     if (this.state.data.sort_locale && this.state.data.sort_locale != '') {
                        $('#sort_locale').data('selected-locale', this.state.data.sort_locale)
                     }
                     var localeList = {}
                     var localeData = {}
                     var selected = ''
                     this.state.data.locales.forEach(loc => {
                        localeList[loc['lang']] = null
                        localeData[loc['lang']] = loc['code']
                        if (loc['code'] == this.state.data.locale) {
                           selected = loc['lang']
                        }
                     })
                     $('#sort_locale').autocomplete({data: localeList})
                     $('#sort_locale').data('locales', localeData)
                     if (selected != '') {
                        $('#sort_locale').val(selected)
                     }
                     $('#sort_locale').on('change', function() {
                        var localeData = $(this).data('locales')
                        $(this).data('selected-locale', localeData[$(this).val()])
                     })
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     M.updateTextFields()
                     M.textareaAutoResize($('#advancedAnnotations'))
                  })
         },

         onUpdated() {
            if (this.dictData.dictConfigs.xema && this.dictData.dictConfigs.xema.elements) {
               if ($('#headword option').length == 1) {
                  Object.entries(this.dictData.dictConfigs.xema.elements).forEach(([key, info]) => {
                     $('#headword').append('<option value="' + key + '">' + key + '</option>')
                  })
               }
               if ($('#headwordSorting option').length == 1) {
                  Object.entries(this.dictData.dictConfigs.xema.elements).forEach(([key, info]) => {
                     $('#headwordSorting').append('<option value="' + key + '">' + key + '</option>')
                  })
               }
               if ($('#headwordAnnotations option').length == 0) {
                  Object.entries(this.dictData.dictConfigs.xema.elements).forEach(([key, info]) => {
                     if (key != this.state.data.headword) {
                        $('#headwordAnnotations').append('<option value="' + key + '">' + key + '</option>')
                     }
                  })
               }
               if (this.state.data.headword != '') {
                  $('#headword option[value='+this.state.data.headword+']').attr('selected','selected')
               }
               if (this.state.data.headwordSorting != '') {
                  $('#headwordSorting option[value='+this.state.data.headwordSorting+']').attr('selected','selected')
               }
               this.state.data.headwordAnnotations.forEach(el => {
                  $('#headwordAnnotations option[value='+el+']').attr('selected','selected')
               })


               $('select').formSelect()
            }
         },

         getConfigData() {
            var newData = {
               headword: $('#headword').val(),
               headwordSorting: $('#headwordSorting').val(),
               sortDesc: $('#sortDesc').is(':checked'),
               numberEntries: $('#numberEntries').val(),
               locale: $('#sort_locale').data('selected-locale')
            }
            if ($('[name=hwannotype][value=advanced]').is(':checked')) {
               newData.headwordAnnotationsType = 'advanced'
               newData.headwordAnnotationsAdvanced = $('#advancedAnnotations').val()
            } else {
               newData.headwordAnnotationsType = 'simple'
               newData.headwordAnnotations = $('#headwordAnnotations').val()
            }
            return newData
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("titling", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

</dict-config-titling>
