<dict-upload>
   <loading-overlay if={state.isUploading}/>
   <dict-nav links={[["upload", "Upload"]]}/>
   <h3>Upload</h3>
   <div class="file-field input-field buttons"
         style="max-width: 700px;">
      <div class="btn">
         <span>Choose XML file</span>
         <input type="file"
               id="file">
      </div>
      <div class="file-path-wrapper">
         <input class="file-path validate"
               type="text">
      </div>
      <div>
         <a class="waves-effect waves-light btn btn-primary {state.isUploading || state.isImporting ? 'disabled' : ''}"
               onclick={ doUpload }
               id="startButton">
            <i class="material-icons left">file_upload</i>Upload file
         </a>
      </div>
   </div>
   <div>
      <label>
         <input type="checkbox"
               id="purge" />
         <span>Purge dictionary before upload</span>
      </label>
   </div>
   <br><br>


   <template if={state.infoMessage || state.errorMessage}>
      <h5>Progress</h5>
      <div if={state.infoMessage}
            classs="message messageInfo">
         <raw-html content={state.infoMessage}></raw-html>
      </div>
      <div if={state.errorMessage}
            class="message messageError">
         <raw-html content={state.errorMessage}></raw-html>
      </div>
   </template>

   <script>
      export default {
         state: {
            isUploading: false,
            isImporting: false,
            showProgress: false,
            errorMessage: "",
            infoMessage: ""
         },

         doUpload() {
            var fd = new FormData()
            var files = $('#file')[0].files[0];
            fd.append('myfile', files)
            if ($('#purge').is(':checked')) fd.append('purge', 'on')
            this.update({
               isUploading: true,
               errorMessage: "",
               infoMessage: "Upload started, please keep the window open."
            })
            this.store.uploadXML(fd)
                  .done((response) => {
                        if (response.success) {
                           this.startImport(response.file, response.uploadStart)
                        } else {
                           this.update({infoMessage: 'Error while uploading file'})
                        }
                     })
                  .always(() => {
                     this.update({isUploading: false})
                  })
         },

         startImport(file, uploadStart) {
            if (file != '') {
               this.update({isImporting: true})
               this.store.importXML({
                  filename: file,
                  uploadStart: uploadStart
               })
                     .done(response => {
                        clearTimeout(this.state.timeutHandle)
                        this.state.infoMessage = response.progressMessage
                        if (response.finished) {
                           this.state.isImporting = false
                           this.state.infoMessage += ' Dictionary import finished. <a href="#/' + this.dictData.dictId + '">See dictionary</a>'
                        } else if (response.errors) {
                           this.state.infoMessage = 'There were some errors during XML parsing'
                           this.store.importXML({
                              filename: file,
                              uploadStart: uploadStart,
                              showErrors: true,
                              truncate: 10000
                           })
                                 .done(response => {
                                    this.update({errorMessage: response.errorData})
                                 })
                           this.state.isImporting = false
                        } else {
                           this.state.timeutHandle = setTimeout(this.startImport.bind(this, file, uploadStart), 2000)
                        }
                        this.update()
                     })
            }
         }
      }
   </script>
</dict-upload>
