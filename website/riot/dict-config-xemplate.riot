<dict-config-xemplate>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["xemplate", "Entry formatting"]]}/>
   <h3>Entry formatting</h3>
   <div if={ (!state.data._xsl || state.data._xsl == "") && (!state.data._css || state.data._css == "") && !state.override }>
      <div class="row designer"
            id="editor"></div>
      <div class="row">
         <div class="col s10">
            <button class="btn waves-effect waves-light"
                  onclick={ startOverride } >
               Use your own stylesheet
               <i class="material-icons right">edit</i>
            </button>
         </div>
      </div>
   </div>
   <div if={ (state.data._xsl && state.data._xsl != "") || (state.data._css && state.data._css != "") || state.override }>
      <div class="row">
         <div class="input-field col s10">
            <textarea id="editor_xsl"
                  class="materialize-textarea">{ state.data._xsl }</textarea>
            <label for="editor_xsl">XSL</label>
            <span class="helper-text">Custom XSL stylesheet. If you would like to see an example,
               <a onclick={ exampleXsl }>click here to load a sample XSL</a>.
            </span>
         </div>
      </div>
      <div class="row">
         <div class="input-field col s10">
            <textarea id="editor_css"
                  class="materialize-textarea">{ state.data._css }</textarea>
            <label for="editor_css">CSS</label>
            <span class="helper-text">Custom CSS stylesheet. If you would like to see an example,
               <a onclick={ exampleCss }>click here to load a sample CSS</a>.
            </span>
         </div>
      </div>

      <div class="row">
         <div class="col s10">
            <button class="btn waves-effect waves-light"
                  onclick={ stopOverride } >
               Stop using your own stylesheet
               <i class="material-icons right">edit</i>
            </button>
         </div>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>

   <style>
      #editor {
         position: relative !important;
         min-height: 1050px;
      }
      #editor .list {
         width: 25% !important;
      }
      #editor .details {
         left: 25% !important;
         width: 35% !important;
      }
      #editor .preview {
         left: 60% !important;
         width: 40% !important;
      }
      #editor.designer input[type=radio] {
         opacity: 1 !important;
      }
   </style>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            override: false,
            data: {}
         },

         startOverride() {
            this.update({override: true})
         },

         stopOverride() {
            delete this.state.data._xsl
            delete this.state.data._css
            this.update({override: false})
            XemplateDesigner.start(this.dictData.dictConfigs.xema, this.state.data, this.dictData.dictId)
         },

         exampleXsl() {
            $('#editor_xsl').val(
`<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:template match="entry">
      <div class='myEntry'><xsl:apply-templates/></div>
   </xsl:template>
   <xsl:template match="headword">
      <span class='myHeadword'><xsl:apply-templates/></span>
   </xsl:template>
</xsl:stylesheet>
`)
            M.textareaAutoResize($('#editor_xsl'))
            M.updateTextFields()
         },

         exampleCss() {
            $('#editor_css').val(
`div.myEntry {font-family: serif; font-size: 1.25em}
div.myEntry span.myHeadword {font-weight: bold}
`)
            M.textareaAutoResize($('#editor_css'))
            M.updateTextFields()
         },

         onMounted() {
            this.store.loadDictionaryConfig("xemplate")
                  .done(response => {
                     this.state.data = response.content
                     this.state.override = this.state.data._xsl || this.state.data._css
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.override){
                        M.updateTextFields()
                        M.textareaAutoResize($('#editor_css'))
                        M.textareaAutoResize($('#editor_xsl'))
                     }
                  })
         },

         onUpdated() {
            if (this.dictData.dictConfigs.xema && this.state.data != {} && !this.state.override) {
               XemplateDesigner.start(this.dictData.dictConfigs.xema, this.state.data, this.dictData.dictId)
            }
         },

         getConfigData() {
            var newData = {}
            if (XemplateDesigner.xemplate) {
               newData = XemplateDesigner.xemplate
            }
            if (this.state.override) {
               if ($('#editor_css').val() != "") newData._css = $('#editor_css').val()
               if ($('#editor_xsl').val() != "") newData._xsl = $('#editor_xsl').val()
            }
            return newData
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("xemplate", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

</dict-config-xemplate>
