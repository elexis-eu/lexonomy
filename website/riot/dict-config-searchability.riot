<dict-config-searchability>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["searchability", "Searching"]]}/>
   <h3>Searching</h3>
   <div if={!state.isLoading && !state.hasElements}
         class="center-align grey-text">
      <h3>No elements found</h3>
   </div>
   <div if={!state.isLoading && state.hasElements}>
      <label for="search-element">Searchable elements</label>
      <div class="helper-text">
         The contents of elements you select here will be searchable (in addition to each entry's headword).
      </div>
      <br>
      <div each={element in Object.keys(dictData.config.xema.elements)}>
         <label>
            <input type="checkbox"
                  value={element}
                  checked={state.data.searchableElements && state.data.searchableElements.includes(element)}
                  disabled={element == dictData.config.titling.headword}/>
            <span>{element}</span>
         </label>
      </div>
   </div>
   <br><br>
   <dict-config-buttons save-data={saveData}
         show-save={state.hasElements}></dict-config-buttons>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            hasElements: false,
            data: {searchableElements: []}
         },

         onBeforeMount() {
            this.state.hasElements = this.dictData.config.xema
                  && this.dictData.config.xema.elements
                  && Object.keys(this.dictData.config.xema.elements).length
         },

         onMounted() {
            this.store.loadDictionaryConfig("searchability")
                  .done(response => {
                     this.state.data = response.content
                  }).always(() => {
                     this.update({isLoading: false})
                  })
         },

         getConfigData() {
            return {
               searchableElements: $('input[type="checkbox"]:checked').toArray().map(function(elem){
                  return $(elem).attr("value")
               })
            }
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("searchability", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

</dict-config-searchability>
