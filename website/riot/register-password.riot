<register-password>
   <loading-overlay if={state.isRegisteringPassword}/>
   <div if={ !state.messageSent && state.tokenValid}>
      <div class="row">
         <div class="input-field col s12">
            <input id="password"
                  type="password"
                  class="validate"
                  onkeypress={ onKeyUp }/>
            <label for="password">Your password</label>
            <span class="helper-text">Set your password to access Lexonomy.</span>
            <input id="token"
                  type="hidden"
                  value={ authData.token }/>
         </div>
      </div>
      <div class="row">
         <button class="btn waves-effect waves-light"
               name="login"
               onclick={ registerPassword }>Set password
            <i class="material-icons right">send</i>
         </button>
      </div>
   </div>
   <div if={ !state.tokenValid && !state.isCheckingToken }
         class="row">
      <div class="col s12">
         <div class="card red darken-2">
            <div class="card-content white-text">
               <p>This signup link is invalid. It may have expired or has been used before.</p>
            </div>
         </div>
      </div>
   </div>
   <div if={ state.isCheckingToken }
         class="row">
      <p>Validating signup token...</p>
   </div>
   <div if={ state.messageSent }
         class="row">
      <p>We have created your account. You can now <a href="#/">log in</a> with your e-mail address and password.</p>
   </div>
   <div if={ state.errorMessage != ''}
         class="row">
      <div class="col s6">
         <div class="card red darken-2">
            <div class="card-content white-text">
               <p>{ state.errorMessage }</p>
            </div>
         </div>
      </div>
   </div>

   <script>
      export default {
         state:{
            messageSent: false,
            tokenValid: false,
            errorMessage: '',
            isCheckingToken: true,
            isRegisteringPassword: false
         },

         validateToken(token) {
            this.auth.validateToken(token, "register")
                  .done(response => {
                     if (response.success) {
                        this.state.tokenValid = true
                     }
                  })
                  .always(() => {
                     this.update({isCheckingToken: false})
                  })
         },

         onMounted() {
            this.validateToken(this.authData.token)
         },

         onKeyUp(evt){
             evt.keyCode == 13 && this.registerPassword()
          },

         registerPassword(event) {
            let password = $("#password").val()
            if(password){
               this.update({isRegisteringPassword: true})
               this.auth.registerPassword(this.authData.token, password)
                     .always(() => {
                        this.update({
                           messageSent: result.success,
                           errorMessage: result.success ? "" : result.errorMessage,
                           isRegisteringPassword: false
                        })
                     })
            }
         }
      }
   </script>
</register-password>
